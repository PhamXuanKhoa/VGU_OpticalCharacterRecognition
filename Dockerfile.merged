# Stage 1: Build the frontend
FROM node:20-alpine AS frontend-builder

WORKDIR /app/frontend

COPY frontend/package*.json ./
RUN npm install

COPY frontend/ ./
RUN npm run build

# Stage 2: Build the backend and serve both
FROM python:3.10-slim-bookworm

ARG BUILD_VERSION=full
ENV BUILD_VERSION=${BUILD_VERSION}

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    tesseract-ocr \
    tesseract-ocr-vie \
    libgl1-mesa-glx \
    nginx \
    dos2unix \
    && rm -rf /var/lib/apt/lists/*

# Copy backend requirements and install
COPY backend/requirements.txt ./backend/
RUN pip install --no-cache-dir -r ./backend/requirements.txt --extra-index-url https://download.pytorch.org/whl/cpu

# Download spaCy model
RUN python -m spacy download en_core_web_sm

# Copy backend code
COPY backend/ ./

# Download models during build
RUN --mount=type=secret,id=HUGGING_FACE_HUB_TOKEN,dst=/run/secrets/hugging_face_token \
    export HUGGING_FACE_HUB_TOKEN=$(cat /run/secrets/hugging_face_token) && \
    python ./download_models.py && \
    rm ./download_models.py

# Copy frontend build artifacts
COPY --from=frontend-builder /app/frontend/dist ./frontend/dist

# Remove default Nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose ports
EXPOSE 80
EXPOSE 8000

# Create a start script
COPY start.sh ./
RUN dos2unix start.sh
RUN chmod +x start.sh

CMD ["./start.sh"]