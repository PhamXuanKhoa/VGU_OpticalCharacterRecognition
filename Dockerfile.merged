# Stage 1: Build the frontend
FROM node:20-alpine AS frontend-builder

WORKDIR /app/frontend

COPY frontend/package*.json ./
RUN npm install
COPY frontend/ ./
RUN npm run build

# Stage 2: Build python dependencies
FROM python:3.10-slim-bookworm as python-builder
WORKDIR /app
RUN pip install --upgrade pip
COPY backend/requirements.txt ./backend/
# Build the wheels
RUN pip wheel --no-cache-dir --wheel-dir=/app/wheels -r ./backend/requirements.txt --extra-index-url https://download.pytorch.org/whl/cpu

# Stage 3: Final image
FROM python:3.10-slim-bookworm

WORKDIR /app

# Install dependencies from wheels
COPY --from=python-builder /app/wheels /wheels
RUN pip install --no-cache-dir /wheels/* && rm -rf /wheels

# Install dependencies and download spaCy model
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    tesseract-ocr \
    tesseract-ocr-vie \
    libgl1-mesa-glx \
    nginx && \
    rm -rf /var/lib/apt/lists/* && \
    python -m spacy download en_core_web_sm

# Copy backend code
COPY backend/ ./

# Download models during build
RUN --mount=type=secret,id=HUGGING_FACE_HUB_TOKEN,dst=/run/secrets/hugging_face_token \
    export HUGGING_FACE_HUB_TOKEN=$(cat /run/secrets/hugging_face_token) && \
    python ./download_models.py && \
    rm ./download_models.py

# Copy frontend build artifacts
COPY --from=frontend-builder /app/frontend/dist ./frontend/dist

# Install Nginx to serve the frontend static files
# RUN apt-get update && apt-get install -y nginx dos2unix && rm -rf /var/lib/apt/lists/*

# Remove default Nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose ports
EXPOSE 80
EXPOSE 8000

# Create a start script
COPY start.sh ./
RUN dos2unix start.sh
RUN chmod +x start.sh

CMD ["./start.sh"]